# import User, Person, Action, File, AuthPayload, PersonSubscriptionPayload, ActionSubscriptionPayload from './generated/prisma.graphql'


input CreateActionMemberInput {
  personId: ID
  isUser: Boolean!
  side: String!
}

input UpdateActionMemberInput {
  id: ID
  personId: ID
  isUser: Boolean!
  side: String!
}

scalar Upload


type Query {
  user: User!
  users: [User!]!

  person(id: ID!): Person!
  persons: [Person!]!

  action(id: ID!): Action!
  actions: [Action!]!

  file(id: ID!): File!
  files: [File!]!
}


type Mutation {
  signup(
    email: String!
    password: String!
    nickname: String!
    name: String
  ): AuthPayload!
  login(login: String! password: String!): AuthPayload!

  updateUser(
    email: String
    password: String
    name: String
    nickname: String
  ): User!
  deleteUser: User!

  createPerson(
    avatar: ID
    name: String!
    position: String!
    description: String
  ): Person!
  updatePerson(
    id: ID!
    avatar: ID
    deleteAvatar: Boolean
    name: String
    position: String
    description: String
    karma: Int
  ): Person!
  deletePerson(id: ID!): Person

  createAction(
    title: String!
    date: String!
    description: String
    karma: String!
    executors: String!
    members: [CreateActionMemberInput!]!
  ): Action!
  updateAction(
    id: ID!
    title: String
    date: String
    description: String
    karma: String
    executors: String
    members: [UpdateActionMemberInput!]
  ): Action!
  deleteAction(id: ID!): Action!

  uploadFile(file: Upload!): File!
  uploadFiles(files: [Upload!]!): [File!]!
  deleteFile(id: ID!): File!
}


type Subscription {
  personCreated: PersonSubscriptionPayload!
  personUpdated: PersonSubscriptionPayload!
  personDeleted: PersonSubscriptionPayload!

  actionCreated: ActionSubscriptionPayload!
  actionUpdated: ActionSubscriptionPayload!
  actionDeleted: ActionSubscriptionPayload!
}