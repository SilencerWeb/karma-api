# source: https://eu1.prisma.sh/silencerweb-d7143d/karma-api/development
# timestamp: Wed Jul 04 2018 14:19:54 GMT+0500 (Uzbekistan Standard Time)

type Action implements Node {
  id: ID!
  title: String!
  date: String!
  description: String
  karma: String!
  executors: String!
  members(where: ActionMemberWhereInput, orderBy: ActionMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionMember!]
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
  author(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ActionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionEdge]!
  aggregate: AggregateAction!
}

input ActionCreateInput {
  title: String!
  date: String!
  description: String
  karma: String!
  executors: String!
  members: ActionMemberCreateManyWithoutActionInput
  persons: PersonCreateManyWithoutActionsInput
  author: UserCreateOneWithoutActionsInput!
}

input ActionCreateManyWithoutAuthorInput {
  create: [ActionCreateWithoutAuthorInput!]
  connect: [ActionWhereUniqueInput!]
}

input ActionCreateManyWithoutPersonsInput {
  create: [ActionCreateWithoutPersonsInput!]
  connect: [ActionWhereUniqueInput!]
}

input ActionCreateOneWithoutMembersInput {
  create: ActionCreateWithoutMembersInput
  connect: ActionWhereUniqueInput
}

input ActionCreateWithoutAuthorInput {
  title: String!
  date: String!
  description: String
  karma: String!
  executors: String!
  members: ActionMemberCreateManyWithoutActionInput
  persons: PersonCreateManyWithoutActionsInput
}

input ActionCreateWithoutMembersInput {
  title: String!
  date: String!
  description: String
  karma: String!
  executors: String!
  persons: PersonCreateManyWithoutActionsInput
  author: UserCreateOneWithoutActionsInput!
}

input ActionCreateWithoutPersonsInput {
  title: String!
  date: String!
  description: String
  karma: String!
  executors: String!
  members: ActionMemberCreateManyWithoutActionInput
  author: UserCreateOneWithoutActionsInput!
}

"""An edge in a connection."""
type ActionEdge {
  """The item at the end of the edge."""
  node: Action!

  """A cursor for use in pagination."""
  cursor: String!
}

type ActionMember implements Node {
  id: ID!
  person(where: PersonWhereInput): Person
  user(where: UserWhereInput): User
  isUser: Boolean!
  side: String!
  action(where: ActionWhereInput): Action!
}

"""A connection to a list of items."""
type ActionMemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionMemberEdge]!
  aggregate: AggregateActionMember!
}

input ActionMemberCreateInput {
  isUser: Boolean!
  side: String!
  person: PersonCreateOneInput
  user: UserCreateOneInput
  action: ActionCreateOneWithoutMembersInput!
}

input ActionMemberCreateManyWithoutActionInput {
  create: [ActionMemberCreateWithoutActionInput!]
  connect: [ActionMemberWhereUniqueInput!]
}

input ActionMemberCreateWithoutActionInput {
  isUser: Boolean!
  side: String!
  person: PersonCreateOneInput
  user: UserCreateOneInput
}

"""An edge in a connection."""
type ActionMemberEdge {
  """The item at the end of the edge."""
  node: ActionMember!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionMemberOrderByInput {
  id_ASC
  id_DESC
  isUser_ASC
  isUser_DESC
  side_ASC
  side_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionMemberPreviousValues {
  id: ID!
  isUser: Boolean!
  side: String!
}

type ActionMemberSubscriptionPayload {
  mutation: MutationType!
  node: ActionMember
  updatedFields: [String!]
  previousValues: ActionMemberPreviousValues
}

input ActionMemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionMemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionMemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionMemberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionMemberWhereInput
}

input ActionMemberUpdateInput {
  isUser: Boolean
  side: String
  person: PersonUpdateOneInput
  user: UserUpdateOneInput
  action: ActionUpdateOneWithoutMembersInput
}

input ActionMemberUpdateManyWithoutActionInput {
  create: [ActionMemberCreateWithoutActionInput!]
  connect: [ActionMemberWhereUniqueInput!]
  disconnect: [ActionMemberWhereUniqueInput!]
  delete: [ActionMemberWhereUniqueInput!]
  update: [ActionMemberUpdateWithWhereUniqueWithoutActionInput!]
  upsert: [ActionMemberUpsertWithWhereUniqueWithoutActionInput!]
}

input ActionMemberUpdateWithoutActionDataInput {
  isUser: Boolean
  side: String
  person: PersonUpdateOneInput
  user: UserUpdateOneInput
}

input ActionMemberUpdateWithWhereUniqueWithoutActionInput {
  where: ActionMemberWhereUniqueInput!
  data: ActionMemberUpdateWithoutActionDataInput!
}

input ActionMemberUpsertWithWhereUniqueWithoutActionInput {
  where: ActionMemberWhereUniqueInput!
  update: ActionMemberUpdateWithoutActionDataInput!
  create: ActionMemberCreateWithoutActionInput!
}

input ActionMemberWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionMemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionMemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionMemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isUser: Boolean

  """All values that are not equal to given value."""
  isUser_not: Boolean
  side: String

  """All values that are not equal to given value."""
  side_not: String

  """All values that are contained in given list."""
  side_in: [String!]

  """All values that are not contained in given list."""
  side_not_in: [String!]

  """All values less than the given value."""
  side_lt: String

  """All values less than or equal the given value."""
  side_lte: String

  """All values greater than the given value."""
  side_gt: String

  """All values greater than or equal the given value."""
  side_gte: String

  """All values containing the given string."""
  side_contains: String

  """All values not containing the given string."""
  side_not_contains: String

  """All values starting with the given string."""
  side_starts_with: String

  """All values not starting with the given string."""
  side_not_starts_with: String

  """All values ending with the given string."""
  side_ends_with: String

  """All values not ending with the given string."""
  side_not_ends_with: String
  person: PersonWhereInput
  user: UserWhereInput
  action: ActionWhereInput
}

input ActionMemberWhereUniqueInput {
  id: ID
}

enum ActionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  date_ASC
  date_DESC
  description_ASC
  description_DESC
  karma_ASC
  karma_DESC
  executors_ASC
  executors_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionPreviousValues {
  id: ID!
  title: String!
  date: String!
  description: String
  karma: String!
  executors: String!
}

type ActionSubscriptionPayload {
  mutation: MutationType!
  node: Action
  updatedFields: [String!]
  previousValues: ActionPreviousValues
}

input ActionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionWhereInput
}

input ActionUpdateInput {
  title: String
  date: String
  description: String
  karma: String
  executors: String
  members: ActionMemberUpdateManyWithoutActionInput
  persons: PersonUpdateManyWithoutActionsInput
  author: UserUpdateOneWithoutActionsInput
}

input ActionUpdateManyWithoutAuthorInput {
  create: [ActionCreateWithoutAuthorInput!]
  connect: [ActionWhereUniqueInput!]
  disconnect: [ActionWhereUniqueInput!]
  delete: [ActionWhereUniqueInput!]
  update: [ActionUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ActionUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ActionUpdateManyWithoutPersonsInput {
  create: [ActionCreateWithoutPersonsInput!]
  connect: [ActionWhereUniqueInput!]
  disconnect: [ActionWhereUniqueInput!]
  delete: [ActionWhereUniqueInput!]
  update: [ActionUpdateWithWhereUniqueWithoutPersonsInput!]
  upsert: [ActionUpsertWithWhereUniqueWithoutPersonsInput!]
}

input ActionUpdateOneWithoutMembersInput {
  create: ActionCreateWithoutMembersInput
  connect: ActionWhereUniqueInput
  delete: Boolean
  update: ActionUpdateWithoutMembersDataInput
  upsert: ActionUpsertWithoutMembersInput
}

input ActionUpdateWithoutAuthorDataInput {
  title: String
  date: String
  description: String
  karma: String
  executors: String
  members: ActionMemberUpdateManyWithoutActionInput
  persons: PersonUpdateManyWithoutActionsInput
}

input ActionUpdateWithoutMembersDataInput {
  title: String
  date: String
  description: String
  karma: String
  executors: String
  persons: PersonUpdateManyWithoutActionsInput
  author: UserUpdateOneWithoutActionsInput
}

input ActionUpdateWithoutPersonsDataInput {
  title: String
  date: String
  description: String
  karma: String
  executors: String
  members: ActionMemberUpdateManyWithoutActionInput
  author: UserUpdateOneWithoutActionsInput
}

input ActionUpdateWithWhereUniqueWithoutAuthorInput {
  where: ActionWhereUniqueInput!
  data: ActionUpdateWithoutAuthorDataInput!
}

input ActionUpdateWithWhereUniqueWithoutPersonsInput {
  where: ActionWhereUniqueInput!
  data: ActionUpdateWithoutPersonsDataInput!
}

input ActionUpsertWithoutMembersInput {
  update: ActionUpdateWithoutMembersDataInput!
  create: ActionCreateWithoutMembersInput!
}

input ActionUpsertWithWhereUniqueWithoutAuthorInput {
  where: ActionWhereUniqueInput!
  update: ActionUpdateWithoutAuthorDataInput!
  create: ActionCreateWithoutAuthorInput!
}

input ActionUpsertWithWhereUniqueWithoutPersonsInput {
  where: ActionWhereUniqueInput!
  update: ActionUpdateWithoutPersonsDataInput!
  create: ActionCreateWithoutPersonsInput!
}

input ActionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  karma: String

  """All values that are not equal to given value."""
  karma_not: String

  """All values that are contained in given list."""
  karma_in: [String!]

  """All values that are not contained in given list."""
  karma_not_in: [String!]

  """All values less than the given value."""
  karma_lt: String

  """All values less than or equal the given value."""
  karma_lte: String

  """All values greater than the given value."""
  karma_gt: String

  """All values greater than or equal the given value."""
  karma_gte: String

  """All values containing the given string."""
  karma_contains: String

  """All values not containing the given string."""
  karma_not_contains: String

  """All values starting with the given string."""
  karma_starts_with: String

  """All values not starting with the given string."""
  karma_not_starts_with: String

  """All values ending with the given string."""
  karma_ends_with: String

  """All values not ending with the given string."""
  karma_not_ends_with: String
  executors: String

  """All values that are not equal to given value."""
  executors_not: String

  """All values that are contained in given list."""
  executors_in: [String!]

  """All values that are not contained in given list."""
  executors_not_in: [String!]

  """All values less than the given value."""
  executors_lt: String

  """All values less than or equal the given value."""
  executors_lte: String

  """All values greater than the given value."""
  executors_gt: String

  """All values greater than or equal the given value."""
  executors_gte: String

  """All values containing the given string."""
  executors_contains: String

  """All values not containing the given string."""
  executors_not_contains: String

  """All values starting with the given string."""
  executors_starts_with: String

  """All values not starting with the given string."""
  executors_not_starts_with: String

  """All values ending with the given string."""
  executors_ends_with: String

  """All values not ending with the given string."""
  executors_not_ends_with: String
  members_every: ActionMemberWhereInput
  members_some: ActionMemberWhereInput
  members_none: ActionMemberWhereInput
  persons_every: PersonWhereInput
  persons_some: PersonWhereInput
  persons_none: PersonWhereInput
  author: UserWhereInput
}

input ActionWhereUniqueInput {
  id: ID
}

type AggregateAction {
  count: Int!
}

type AggregateActionMember {
  count: Int!
}

type AggregateAuthPayload {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type AuthPayloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthPayloadEdge]!
  aggregate: AggregateAuthPayload!
}

input AuthPayloadCreateInput {
  token: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type AuthPayloadEdge {
  """The item at the end of the edge."""
  node: AuthPayload!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthPayloadOrderByInput {
  token_ASC
  token_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthPayloadPreviousValues {
  token: String!
}

type AuthPayloadSubscriptionPayload {
  mutation: MutationType!
  node: AuthPayload
  updatedFields: [String!]
  previousValues: AuthPayloadPreviousValues
}

input AuthPayloadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthPayloadWhereInput
}

input AuthPayloadUpdateInput {
  token: String
  user: UserUpdateOneInput
}

input AuthPayloadWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadWhereInput!]
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  user: UserWhereInput
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAction(data: ActionCreateInput!): Action!
  createActionMember(data: ActionMemberCreateInput!): ActionMember!
  createAuthPayload(data: AuthPayloadCreateInput!): AuthPayload!
  createUser(data: UserCreateInput!): User!
  createPerson(data: PersonCreateInput!): Person!
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateActionMember(data: ActionMemberUpdateInput!, where: ActionMemberWhereUniqueInput!): ActionMember
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActionMember(where: ActionMemberWhereUniqueInput!): ActionMember
  deleteUser(where: UserWhereUniqueInput!): User
  deletePerson(where: PersonWhereUniqueInput!): Person
  upsertAction(where: ActionWhereUniqueInput!, create: ActionCreateInput!, update: ActionUpdateInput!): Action!
  upsertActionMember(where: ActionMemberWhereUniqueInput!, create: ActionMemberCreateInput!, update: ActionMemberUpdateInput!): ActionMember!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  updateManyActions(data: ActionUpdateInput!, where: ActionWhereInput): BatchPayload!
  updateManyActionMembers(data: ActionMemberUpdateInput!, where: ActionMemberWhereInput): BatchPayload!
  updateManyAuthPayloads(data: AuthPayloadUpdateInput!, where: AuthPayloadWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput): BatchPayload!
  deleteManyActions(where: ActionWhereInput): BatchPayload!
  deleteManyActionMembers(where: ActionMemberWhereInput): BatchPayload!
  deleteManyAuthPayloads(where: AuthPayloadWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Person implements Node {
  id: ID!
  name: String!
  position: String!
  karma: Int!
  description: String
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action!]
  author(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  name: String!
  position: String!
  karma: Int!
  description: String
  actions: ActionCreateManyWithoutPersonsInput
  author: UserCreateOneWithoutPersonsInput!
}

input PersonCreateManyWithoutActionsInput {
  create: [PersonCreateWithoutActionsInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateManyWithoutAuthorInput {
  create: [PersonCreateWithoutAuthorInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutActionsInput {
  name: String!
  position: String!
  karma: Int!
  description: String
  author: UserCreateOneWithoutPersonsInput!
}

input PersonCreateWithoutAuthorInput {
  name: String!
  position: String!
  karma: Int!
  description: String
  actions: ActionCreateManyWithoutPersonsInput
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  position_ASC
  position_DESC
  karma_ASC
  karma_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  name: String!
  position: String!
  karma: Int!
  description: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateDataInput {
  name: String
  position: String
  karma: Int
  description: String
  actions: ActionUpdateManyWithoutPersonsInput
  author: UserUpdateOneWithoutPersonsInput
}

input PersonUpdateInput {
  name: String
  position: String
  karma: Int
  description: String
  actions: ActionUpdateManyWithoutPersonsInput
  author: UserUpdateOneWithoutPersonsInput
}

input PersonUpdateManyWithoutActionsInput {
  create: [PersonCreateWithoutActionsInput!]
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  delete: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutActionsInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutActionsInput!]
}

input PersonUpdateManyWithoutAuthorInput {
  create: [PersonCreateWithoutAuthorInput!]
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  delete: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PersonUpdateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateDataInput
  upsert: PersonUpsertNestedInput
}

input PersonUpdateWithoutActionsDataInput {
  name: String
  position: String
  karma: Int
  description: String
  author: UserUpdateOneWithoutPersonsInput
}

input PersonUpdateWithoutAuthorDataInput {
  name: String
  position: String
  karma: Int
  description: String
  actions: ActionUpdateManyWithoutPersonsInput
}

input PersonUpdateWithWhereUniqueWithoutActionsInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutActionsDataInput!
}

input PersonUpdateWithWhereUniqueWithoutAuthorInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutAuthorDataInput!
}

input PersonUpsertNestedInput {
  update: PersonUpdateDataInput!
  create: PersonCreateInput!
}

input PersonUpsertWithWhereUniqueWithoutActionsInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutActionsDataInput!
  create: PersonCreateWithoutActionsInput!
}

input PersonUpsertWithWhereUniqueWithoutAuthorInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutAuthorDataInput!
  create: PersonCreateWithoutAuthorInput!
}

input PersonWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  position: String

  """All values that are not equal to given value."""
  position_not: String

  """All values that are contained in given list."""
  position_in: [String!]

  """All values that are not contained in given list."""
  position_not_in: [String!]

  """All values less than the given value."""
  position_lt: String

  """All values less than or equal the given value."""
  position_lte: String

  """All values greater than the given value."""
  position_gt: String

  """All values greater than or equal the given value."""
  position_gte: String

  """All values containing the given string."""
  position_contains: String

  """All values not containing the given string."""
  position_not_contains: String

  """All values starting with the given string."""
  position_starts_with: String

  """All values not starting with the given string."""
  position_not_starts_with: String

  """All values ending with the given string."""
  position_ends_with: String

  """All values not ending with the given string."""
  position_not_ends_with: String
  karma: Int

  """All values that are not equal to given value."""
  karma_not: Int

  """All values that are contained in given list."""
  karma_in: [Int!]

  """All values that are not contained in given list."""
  karma_not_in: [Int!]

  """All values less than the given value."""
  karma_lt: Int

  """All values less than or equal the given value."""
  karma_lte: Int

  """All values greater than the given value."""
  karma_gt: Int

  """All values greater than or equal the given value."""
  karma_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  actions_every: ActionWhereInput
  actions_some: ActionWhereInput
  actions_none: ActionWhereInput
  author: UserWhereInput
  _MagicalBackRelation_ActionMemberToPerson_every: ActionMemberWhereInput
  _MagicalBackRelation_ActionMemberToPerson_some: ActionMemberWhereInput
  _MagicalBackRelation_ActionMemberToPerson_none: ActionMemberWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type Query {
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action]!
  actionMembers(where: ActionMemberWhereInput, orderBy: ActionMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionMember]!
  authPayloads(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthPayload]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  action(where: ActionWhereUniqueInput!): Action
  actionMember(where: ActionMemberWhereUniqueInput!): ActionMember
  user(where: UserWhereUniqueInput!): User
  person(where: PersonWhereUniqueInput!): Person
  actionsConnection(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionConnection!
  actionMembersConnection(where: ActionMemberWhereInput, orderBy: ActionMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionMemberConnection!
  authPayloadsConnection(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthPayloadConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  action(where: ActionSubscriptionWhereInput): ActionSubscriptionPayload
  actionMember(where: ActionMemberSubscriptionWhereInput): ActionMemberSubscriptionPayload
  authPayload(where: AuthPayloadSubscriptionWhereInput): AuthPayloadSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  nickname: String!
  name: String
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  nickname: String!
  name: String
  persons: PersonCreateManyWithoutAuthorInput
  actions: ActionCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutActionsInput {
  create: UserCreateWithoutActionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPersonsInput {
  create: UserCreateWithoutPersonsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutActionsInput {
  email: String!
  password: String!
  nickname: String!
  name: String
  persons: PersonCreateManyWithoutAuthorInput
}

input UserCreateWithoutPersonsInput {
  email: String!
  password: String!
  nickname: String!
  name: String
  actions: ActionCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  nickname_ASC
  nickname_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  nickname: String!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  nickname: String
  name: String
  persons: PersonUpdateManyWithoutAuthorInput
  actions: ActionUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: String
  password: String
  nickname: String
  name: String
  persons: PersonUpdateManyWithoutAuthorInput
  actions: ActionUpdateManyWithoutAuthorInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutActionsInput {
  create: UserCreateWithoutActionsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutActionsDataInput
  upsert: UserUpsertWithoutActionsInput
}

input UserUpdateOneWithoutPersonsInput {
  create: UserCreateWithoutPersonsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutPersonsDataInput
  upsert: UserUpsertWithoutPersonsInput
}

input UserUpdateWithoutActionsDataInput {
  email: String
  password: String
  nickname: String
  name: String
  persons: PersonUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPersonsDataInput {
  email: String
  password: String
  nickname: String
  name: String
  actions: ActionUpdateManyWithoutAuthorInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutActionsInput {
  update: UserUpdateWithoutActionsDataInput!
  create: UserCreateWithoutActionsInput!
}

input UserUpsertWithoutPersonsInput {
  update: UserUpdateWithoutPersonsDataInput!
  create: UserCreateWithoutPersonsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  nickname: String

  """All values that are not equal to given value."""
  nickname_not: String

  """All values that are contained in given list."""
  nickname_in: [String!]

  """All values that are not contained in given list."""
  nickname_not_in: [String!]

  """All values less than the given value."""
  nickname_lt: String

  """All values less than or equal the given value."""
  nickname_lte: String

  """All values greater than the given value."""
  nickname_gt: String

  """All values greater than or equal the given value."""
  nickname_gte: String

  """All values containing the given string."""
  nickname_contains: String

  """All values not containing the given string."""
  nickname_not_contains: String

  """All values starting with the given string."""
  nickname_starts_with: String

  """All values not starting with the given string."""
  nickname_not_starts_with: String

  """All values ending with the given string."""
  nickname_ends_with: String

  """All values not ending with the given string."""
  nickname_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  persons_every: PersonWhereInput
  persons_some: PersonWhereInput
  persons_none: PersonWhereInput
  actions_every: ActionWhereInput
  actions_some: ActionWhereInput
  actions_none: ActionWhereInput
  _MagicalBackRelation_ActionMemberToUser_every: ActionMemberWhereInput
  _MagicalBackRelation_ActionMemberToUser_some: ActionMemberWhereInput
  _MagicalBackRelation_ActionMemberToUser_none: ActionMemberWhereInput
  _MagicalBackRelation_AuthPayloadToUser_every: AuthPayloadWhereInput
  _MagicalBackRelation_AuthPayloadToUser_some: AuthPayloadWhereInput
  _MagicalBackRelation_AuthPayloadToUser_none: AuthPayloadWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  nickname: String
}
